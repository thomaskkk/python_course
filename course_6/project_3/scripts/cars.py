#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails
import os


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
            car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    max_revenue = {"revenue": 0}
    max_sales = {"sales": 0}
    total_sales_year = {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price

        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item

        # Calculate the max sales
        item_sales = item["total_sales"]

        if item_sales > max_sales["sales"]:
            item["sales"] = item_sales
            max_sales = item

        # Calculate most popular year dict={year:sales}
        # Set default keys (years) if they don't exist
        total_sales_year.setdefault(item["car"]["car_year"], 0)
        # Add sales to the year
        total_sales_year.update(
            {
                item["car"]["car_year"]:
                total_sales_year.get(item["car"]["car_year"])
                + item["total_sales"]
            }
        )

    # Get the year with most sales and the sales quantity
    max_year = max(total_sales_year, key=total_sales_year.get)
    max_year_sales = total_sales_year.get(max_year)

    summary = [
        "The {} generated the most revenue: ${}".format(
            format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(
            format_car(max_sales["car"]), max_sales["sales"]),
        "The most popular year was {} with {} sales.".format(
            max_year, max_year_sales)
    ]

    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([
            item["id"],
            format_car(item["car"]),
            item["price"],
            item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    json_file = "../car_sales.json"
    data = load_data(json_file)
    summary = process_data(data)
    pdf_summary = '<br/>'.join(summary)
    email_summary = '\n'.join(summary)

    # Generate PDF report
    reports.generate(
        "/tmp/cars.pdf",
        "Sales summary for last month",
        pdf_summary,
        cars_dict_to_table(data)
        )

    # Send the PDF report as an email attachment
    sender = "automation@example.com"
    receiver = "{}@example.com".format(os.environ.get('USER'))
    subject = "Sales summary for last month"
    body = email_summary

    message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
    emails.send(message)


if __name__ == "__main__":
    main(sys.argv)
